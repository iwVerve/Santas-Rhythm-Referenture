<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bpm = global.bpm;
bits = global.bits;
data = global.data;
scrPlayMusic(global.song, false);

next_attack = 0;
beat = 0;
bit = 0;
time = 0;

display_grade = 0;
display_time = 0;
display_duration = 25;
display_scale = 1;

hold_dir = 0;
lens_x = 400;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hold_dir = scrButtonCheck(KEY.RIGHT);
if !hold_dir {
    hold_dir = -scrButtonCheck(KEY.LEFT);
}

var lens_target = 400 + global.lens_step * hold_dir;
var diff = lens_target - lens_x;
lens_x += sign(diff) * min(abs(diff), 16);

if scrButtonCheckPressed(KEY.SHOOT) {
    var best_note = noone;
    with(objNoteParent) {
        if best_note == noone || progress &gt; best_note.progress {
            best_note = id;
        }
    }
    if best_note != noone &amp;&amp; best_note.grade &gt; 0 {
        if best_note.dir == hold_dir || best_note.dir == -2 {
            award_grade(best_note.grade);
        }
        else {
            award_grade(0);
        }
        instance_destroy(best_note);
    }
    else {
        award_grade(0);
    }
}

time += 1;
if time &gt; (beat + bit/bits) * 3000 / bpm {
    bit += 1;
    if bit &gt;= bits {
        bit -= bits;
        beat += 1;
    }
    
    while(data[# next_attack, 0] != -1 &amp;&amp; time &gt;= data[# next_attack, 0]) {
        switch(data[# next_attack, 1]) {
            case 0:
                with(instance_create(0, 0, objNoteLine)) {
                    dir = -1;
                }
                break;
            case 1:
                with(instance_create(0, 0, objNoteLine)) {
                    dir = 1;
                }
                break;
            case 2:
                with(instance_create(0, 0, objNoteAimed)) {
                    dir = -1;
                }
                break;
            case 3:
                with(instance_create(0, 0, objNoteAimed)) {
                    dir = 1;
                }
                break;
            case 4:
                with(instance_create(0, 0, objNoteHorizontal)) {
                    dir = -1;
                }
                break;
            case 5:
                with(instance_create(0, 0, objNoteHorizontal)) {
                    dir = 0;
                }
                break;
            case 6:
                with(instance_create(0, 0, objNoteHorizontal)) {
                    dir = 1;
                }
                break;
            case 7:
                instance_create(0, 0, objNoteBonus);
                break;
        }
        next_attack++;
    }
}

if display_time &gt; 0 {
    display_scale = 1 + 2 * power(max(display_time / display_duration - 0.5, 0), 4);
    display_time--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrStopMusic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprLens, 0, lens_x, 112);

if display_time &gt; 0 {
    var grade_text, grade_color;
    switch(display_grade) {
        case -1:
            grade_text = "Hit!";
            grade_color = c_red;
            break;
        case 0:
            grade_text = "Miss!";
            grade_color = c_red;
            break;
        case 1:
            grade_text = "Good!";
            grade_color = c_ltgray;
            break;
        case 2:
            grade_text = "Great!";
            grade_color = merge_color(c_green, c_white, 0.1);
            break;
    }
    draw_set_font(fDefault24);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_middle);
    draw_set_color(c_black);
    for(var i = 0; i &lt; 8; i++) {
        draw_text_transformed(400 + lengthdir_x(2, i/8 * 360), 80 + lengthdir_y(2, i/8 * 360), grade_text, display_scale, display_scale, 0);
    }
    draw_set_color(grade_color);
    draw_text_transformed(400, 80, grade_text, display_scale, display_scale, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
